#include  "MorphXmlToken.h"
#include  "util_classes.h"
#include  <set>

void	CXmlMorphAnnot::GetAsSetOfProperties(vector<string>& Result)  const
{
	Result.clear();

	StringTokenizer tok2(m_GrammemsStr.c_str(), " \t,|; ");
	while (tok2())
		Result.push_back(tok2.val());

	sort(Result.begin(), Result.end());

};


CXmlToken::CXmlToken() 
{
	m_bLastInSentence = false;
};

bool CXmlToken::IsImportantPunct() const
{
    return                  (m_WordStr == ",") 
						||	(m_WordStr == ".")
						||	(m_WordStr == "?")
						||	(m_WordStr == "!")
						||	(m_WordStr == ":")
						||	(m_WordStr == ";")
						||	(m_WordStr == "-");
				
}


class CRusCorpFeatures {
public:
    std::set<std::string> m_RusCorpFeatures;
    CRusCorpFeatures()
    {
        m_RusCorpFeatures.insert("adv");
        m_RusCorpFeatures.insert("a");
        m_RusCorpFeatures.insert("s");
        m_RusCorpFeatures.insert("v");
        m_RusCorpFeatures.insert("spro");
        m_RusCorpFeatures.insert("apro");
        m_RusCorpFeatures.insert("advpro");
        m_RusCorpFeatures.insert("num");
        m_RusCorpFeatures.insert("anum");
        m_RusCorpFeatures.insert("praedic");
        m_RusCorpFeatures.insert("pr");
        m_RusCorpFeatures.insert("conj");
        m_RusCorpFeatures.insert("intj");
        m_RusCorpFeatures.insert("parenth");
        m_RusCorpFeatures.insert("part");
        m_RusCorpFeatures.insert("nonlex");
        m_RusCorpFeatures.insert("init");
        m_RusCorpFeatures.insert("praedicpro");
        m_RusCorpFeatures.insert("sg");
        m_RusCorpFeatures.insert("pl");
        m_RusCorpFeatures.insert("nom");
        m_RusCorpFeatures.insert("gen");
        m_RusCorpFeatures.insert("dat");
        m_RusCorpFeatures.insert("acc");
        m_RusCorpFeatures.insert("ins");
        m_RusCorpFeatures.insert("loc");
        m_RusCorpFeatures.insert("voc");
        m_RusCorpFeatures.insert("m");
        m_RusCorpFeatures.insert("f");
        m_RusCorpFeatures.insert("n");
        m_RusCorpFeatures.insert("loc2");
        m_RusCorpFeatures.insert("gen2");
        m_RusCorpFeatures.insert("acc2");
        m_RusCorpFeatures.insert("famn");
        m_RusCorpFeatures.insert("persn");
        m_RusCorpFeatures.insert("patrn");
        m_RusCorpFeatures.insert("imper");
        m_RusCorpFeatures.insert("inf");
        m_RusCorpFeatures.insert("partcp");
        m_RusCorpFeatures.insert("ger");
        m_RusCorpFeatures.insert("imper2");
        m_RusCorpFeatures.insert("1p");
        m_RusCorpFeatures.insert("2p");
        m_RusCorpFeatures.insert("3p");
        m_RusCorpFeatures.insert("praes");
        m_RusCorpFeatures.insert("fut");
        m_RusCorpFeatures.insert("praet");
        m_RusCorpFeatures.insert("anim");
        m_RusCorpFeatures.insert("inan");
        m_RusCorpFeatures.insert("mf");
        m_RusCorpFeatures.insert("abbr");
        m_RusCorpFeatures.insert("pf");
        m_RusCorpFeatures.insert("ipf");
        m_RusCorpFeatures.insert("comp");
        m_RusCorpFeatures.insert("brev");
        m_RusCorpFeatures.insert("pass");
        m_RusCorpFeatures.insert("0");
        m_RusCorpFeatures.insert("imper2");
        //m_RusCorpFeatures.insert("bastard");
        m_RusCorpFeatures.insert("supr");
    }
};

static CRusCorpFeatures  RusCorpFeatures;

bool IsImportantRusCorpFeature(const string& s)
{
    return RusCorpFeatures.m_RusCorpFeatures.find(s) !=  RusCorpFeatures.m_RusCorpFeatures.end();
}

string CXmlMorphAnnot::BuildRusCorpAnnot() const
{
    StringTokenizer tok (m_GrammemsStr.c_str(), ", ");
    set<string> gs;
    while ( tok() )
    {
        string s = tok.val();
        EngRusMakeLower(s);
        if (IsImportantRusCorpFeature (s))
            gs.insert(s);
    }

    string res;
    for (set<string>::const_iterator it = gs.begin(); it != gs.end(); it++)
        res += *it + "_";
    if (!res.empty())
        res.erase(res.length() -1);
    return res;
}

string POS_Dialing2MyStem(string pos)
{
	if (pos == "Ï") return "a"; else
	if (pos == "Ñ") return "s"; else
	if (pos == "Ã") return "v"; else
	if (pos == "ÌÑ") return "s-pro"; else
	if (pos == "ÌÑ-Ï") return "a-pro"; else
	if (pos == "ÌÑ-ÏĞÅÄÊ") return "praedicpro"; else
	if (pos == "×ÈÑË") return "num"; else
	if (pos == "×ÈÑË-Ï") return "a-num"; else
	if (pos == "Í") return "adv"; else
	if (pos == "ÏĞÅÄÊ") return "praedic"; else
	if (pos == "ÏĞÅÄË") return "pr"; else
	if (pos == "ÑÎŞÇ") return "conj"; else
	if (pos == "ÌÅÆÄ") return "intj"; else
	if (pos == "ÂÂÎÄÍ") return "parenth"; else
	if (pos == "×ÀÑÒ") return "part"; else
	if (pos == "ĞÀÇĞÛÂ_ÑÎŞÇ") return "conj"; else
	{
		return "";
	}
};


string Grammem_Dialing2MyStem(string pos)
{
	if (pos == "åä") return "sg"; else
	if (pos == "ìí") return "pl"; else
	if (pos == "èì") return "nom";  else
	if (pos == "ğä") return "gen";  else
	if (pos == "äò") return "dat";  else
	if (pos == "âí") return "acc";  else
	if (pos == "òâ") return "ins";  else
	if (pos == "ïğ") return "loc";  else
	if (pos == "çâ") return "voc";  else
	if (pos == "ìğ") return "m";  else
	if (pos == "æğ") return "f";  else
	if (pos == "ñğ") return "n";  else
	if (pos == "ôàì") return "famn";  else
	if (pos == "èìÿ") return "persn";  else
	if (pos == "îò÷") return "patrn";  else
	if (pos == "ïâë") return "imper";  else
	if (pos == "èíô") return "inf";  else
	if (pos == "ïğ÷") return "partcp";  else
	if (pos == "äïğ") return "ger";  else
	if (pos == "1ë") return "1p";  else
	if (pos == "2ë") return "2p";  else
	if (pos == "3ë") return "3p";  else
	if (pos == "ñğàâí") return "comp";  else
	if (pos == "êğ") return "brev";  else
	if (pos == "íñò") return "praes";  else
	if (pos == "áóä") return "fut";  else
	if (pos == "ïğø") return "praet";  else
	if (pos == "äñò") return "act";  else
	if (pos == "ñòğ") return "pass";  else
	if (pos == "îä") return "anim";  else
	if (pos == "íî") return "inan";  else
	if (pos == "ñâ") return "pf";  else
	if (pos == "íñ") return "ipf";  else
	if (pos == "ïå") return "tran";  else
	if (pos == "íï") return "intr";  else
	if (pos == "ìğ-æğ") return "m-f";  else
	if (pos == "æàğã") return "anom";  else
	if (pos == "ğàçã") return "anom";  else
	if (pos == "ïğåâ") return "supr";  else
	if (pos == "0") return "0";  else
    if (pos == "ìğ-æğ") return "mf";  else
	if (pos == "àááğ") return "abbr";  else
	{
		return "";
	}
	
	return "";

};

string POS_MyStem2Dialing(string pos)
{
	if (pos == "a") return "Ï"; else
	if (pos == "s") return "Ñ"; else
	if (pos == "v") return "Ã"; else
	if (pos == "spro") return "ÌÑ"; else
	if (pos == "s-pro") return "ÌÑ"; else
	if (pos == "apro") return "ÌÑ-Ï"; else
	if (pos == "a-pro") return "ÌÑ-Ï"; else
	if (pos == "advpro") return "Í"; else
	if (pos == "praedicpro") return "ÌÑ-ÏĞÅÄÊ"; else
	if (pos == "num") return "×ÈÑË"; else
	if (pos == "anum") return "×ÈÑË-Ï"; else
	if (pos == "a-num") return "×ÈÑË-Ï"; else
	if (pos == "adv") return "Í"; else
	if (pos == "praedic") return "ÏĞÅÄÊ"; else
	if (pos == "pr") return "ÏĞÅÄË"; else
	if (pos == "conj") return "ÑÎŞÇ"; else
	if (pos == "intj") return "ÌÅÆÄ"; else
	if (pos == "parenth") return "ÂÂÎÄÍ"; else
	if (pos == "part") return "×ÀÑÒ"; else
	if (pos == "í") return "H"; else
	if (pos == "Ï") return "Ï"; else
	if (pos == "×ÀÑÒ") return "×ÀÑÒ"; else
	if (pos == "ÌÅÆÄ") return "ÌÅÆÄ"; else
	if (pos == "Ì-ÏĞÅÄÊ") return "ÌC-ÏĞÅÄÊ"; else
	if (pos == "ĞÀÇĞÛÂ_ÑÎŞÇ") return "ÑÎŞÇ"; else
	return "";
};


bool IsMyStemSpecificGrammem(string g)
{
return 		(g == "indic") 
		||	(g == "ash") 
        ||	(g == "Ash") 
		||	(g == "norm") 
		||	(g == "anom") 
		||	(g == "distort") 
		||	(g == "bastard") 
		||	(g == "med") 
		||	(g == "plen")
		||	(g == "ciph")
		||	(g == "adnum")
		||	(g == "obsc")
		;
}

string Grammem_MyStem2Dialing(string pos)
{
	if (pos == "sg") return "åä"; else
	if (pos == "pl") return "ìí"; else
	if (pos == "nom") return "èì";  else
	if (pos == "gen") return "ğä";  else
	if (pos == "gen2") return "ğä,2";  else
	if (pos == "dat") return "äò";  else
	if (pos == "acc") return "âí";  else
	if (pos == "acc2") return "èì";  else // "ïîøåë â ñîëäàòû"
	if (pos == "ins") return "òâ";  else
	if (pos == "loc") return "ïğ";  else
	if (pos == "loc2") return "ïğ,2";  else
	if (pos == "m") return "ìğ";  else
	if (pos == "f") return "æğ";  else
    if (pos == "mf") return "ìğ-æğ";  else
	if (pos == "n") return "ñğ";  else

	if (pos == "famn") return "ôàì";  else
	if (pos == "persn") return "èìÿ";  else
	if (pos == "patrn") return "îò÷";  else
	if (pos == "imper") return "ïâë";  else
	if (pos == "imper2") return "ïâë";  else
	if (pos == "inf") return "èíô";  else
	if (pos == "partcp") return "ïğ÷";  else
	if (pos == "ger") return "äïğ";  else
	if (pos == "1p") return "1ë";  else
	if (pos == "1-ë") return "1ë";  else
	if (pos == "2p") return "2ë";  else
	if (pos == "3p") return "3ë";  else
	if (pos == "comp") return "ñğàâí";  else
	if (pos == "comp2") return "ñğàâí,2";  else
	if (pos == "supr") return "ïğåâ";  else
	if (pos == "ïğåâ") return "ïğåâ";  else
	if (pos == "brev") return "êğ";  else
	if (pos == "sh") return "êğ";  else
	if (pos == "praes") return "íñò";  else
	if (pos == "abbr") return "àááğ";  else
	if (pos == "íàñò*") return "íñò";  else
	if (pos == "fut") return "áóä";  else
	if (pos == "praet") return "ïğø";  else
	if (pos == "act") return "äñò";  else
	if (pos == "pass") return "ñòğ";  else
	if (pos == "anim") return "îä";  else
	if (pos == "inan") return "íî";  else
	if (pos == "pf") return "ñâ";  else
	if (pos == "ipf") return "íñ";  else
	if (pos == "tran") return "ïå";  else
	if (pos == "intr") return "íï";  else
	if (pos == "m-f") return "ìğ-æğ";  else
	if (pos == "ìí") return "ìí";  else
	if (pos == "ğä") return "ğä";  else
	if (pos == "åä") return "åä";  else
	if (pos == "íî") return "íî";  else
	if (pos == "äñò") return "äñò";  else
	if (pos == "êğ") return "êğ";  else
	if (pos == "âí") return "âí";  else
	if (pos == "òâ") return "òâ";  else
	if (pos == "ïğ") return "ïğ";  else
	if (pos == "îä") return "îä";  else
	if (pos == "è") return "èì";  else

	if (pos == "ïâë") return "ïâë";  else
	
	if (pos == "ìğ") return "ìğ";  else
	if (pos == "æğ") return "æğ";  else
	if (pos == "ñğ") return "ñğ";  else
	if (pos == "ñòğ") return "ñòğ";  else
	if (pos == "ïå") return "ïå";  else
	if (pos == "èì") return "èì";  else
	if (pos == "ñğ") return "ñğ";  else
	if (pos == "voc") return "çâ";  else
	if (pos == "0") return "0";  else
	if (IsMyStemSpecificGrammem(pos)) return pos;  else
	
		
	
	return "";

};


