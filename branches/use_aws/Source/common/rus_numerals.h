#ifndef __rus_numerals
#define __rus_numerals

#include  "utilit.h"

struct CNumeralToNumber
{
	char				m_Cardinal[25]; // "ДБЮ"
	char				m_Ordinal[25]; // "БРНПНИ"
	char				m_Adverb[25]; // "бдбнел"
	char				m_CoollectiveNumber[25]; //  "дбне"
	char				m_RomanNumber[25]; // II
	double				m_Number; // 2
    bool                m_bNoun; // false
	char				m_GenitForm[25]; // "ДБСУ" (ДБСУКЮЛОНБШИ)
};

const size_t NumeralToNumberCount = 42;
const CNumeralToNumber NumeralToNumber[NumeralToNumberCount+1] = 
{
{"ндхм","оепбши","","","I",1,false,"ндмн"}, 
{"онкрнпю","","","","",1.5,false,"онксрнпн"}, 
{"дбю","брнпни","бдбнел","дбне","II",2,false,"дбсу"}, 
{"рпх","рперхи","брпнел","рпне","III",3,false,"рпеу"}, 
{"вершпе","вербепрши","бвербепнл","вербепн","IV",4,false,"вершпеу"}, 
{"оърэ","оърши","боърепнл","оърепн","V",5,false,"оърх"}, 
{"ьеярэ","ьеярни","бьеярепнл","ьеярепн","VI",6,false,"ьеярх"}, 
{"яелэ","яедэлни","бяелепнл","яелепн","VII",7,false,"яелх"}, 
{"бняелэ","бняэлни","ббняэлепнл","бняэлепн","VIII",8,false,"бняелх"}, 
{"дебърэ","дебърши","бдебърепнл","дебърепн","IX",9 ,false,"дебърх"}, 
{"деяърэ","деяърши","бдеяърепнл","деяърепн","X",10,false,"деяърх"}, 
{"ндхммюджюрэ","ндхммюджюрши","бндхммюджюрепнл","","XI",11,false,"ндхммюджюрх"}, 
{"дбемюджюрэ","дбемюджюрши", "бдбемюджюрепнл","","XII",12,false,"дбемюджюрх"}, 
{"рпхмюджюрэ","рпхмюджюрши", "брпхмюджюрепнл","","XIII",13,false,"рпхмюджюрх"}, 
{"вершпмюджюрэ","вершпмюджюрши","бвершпмюджюрепнл","","XIV",14,false,"вершпмюджюрх"}, 
{"оърмюджюрэ","оърмюджюрши", "боърмюджюрепнл","","XV",15,false,"оърмюджюрх"}, 
{"ьеярмюджюрэ","ьеярмюджюрши", "бьеярмюджюрепнл","","XVI",16,false,"ьеярмюджюрх"}, 
{"яелмюджюрэ","яелмюджюрши", "бяелмюджюрепнл","","XVII",17,false,"яелмюджюрх"},  
{"бняелмюджюрэ","бняелмюджюрши", "ббняелмюджюрепнл","","XIII",18,false,"бняелмюджюрх"},  
{"дебърмюджюрэ","дебърмюджюрши", "бдебърмюджюрепнл","","XIX",19,false,"дебърмюджюрх"}, 
{"дбюджюрэ","дбюджюрши", "бдбюджюрепнл","","XX",20,false,"дбюджюрх"}, 
{"рпхджюрэ","рпхджюрши", "брпхджюрепнл","","XXX",30,false,"рпхджюрх"}, 
{"янпнй","янпнйнбни", "","","XL",40,false,"янпнйю"}, 
{"оърэдеяър","оърхдеяърши", "боърхдеяърепнл","","L",50,false,"оърхдеяърх"},  
{"ьеярэдеяър","ьеярхдеяърши", "бьеярхдеяърепнл","","LX",60,false,"ьеярхдеяърх"}, 
{"яелэдеяър","яелхдеяърши", "бяелхдеяърепнл","","LXX",70,false,"яелхдеяърх"},  
{"бняелэдеяър","бняэлхдеяърши", "ббняэлхдеяърепнл","","LXXX",80,false,"бняэлхдеяърх"}, 
{"дебъмнярн","дебъмнярши", "","","XC",90,false,"дебъмнярн"}, 
{"ярн","янрши","","","C",100,false,"ярн"}, 
{"дбеярх","дбсуянрши","","","CC",200,false,"дбсуянр"}, 
{"рпхярю","рпеуянрши","","","CCC",300,false,"рпеуянр"}, 
{"вершпеярю","вершпеуянрши","","CD","I",400,false,"вершпеуянр"}, 
{"оърэянр","оърхянрши", "","","D",500,false,"оърхянр"}, 
{"ьеярэянр","ьеярхянрши", "","","DC",600,false,"ьеярхянр"}, 
{"яелэянр","яелхянрши", "","","DCC",700,false,"яелхянр"}, 
{"бняелэянр","бняэлхянрши", "","","DCCC",800,false,"бняэлхянр"}, 
{"дебърэянр","дебърхянрши","","","CM",900,false,"дебърхянр"}, 
{"ршяъвю","ршяъвмши","","","M",1000,true,""}, 
{"лхккхнм","лхккхнммши","","","",1000000,true,""},
{"лхккхюпд","лхккхюпдмши","","","",1000000000,true,""},
{"рпхккхнм","рпхккхнммши","","","",1000000000000.0,true,""},
{"йбюдпхккхнм","йбюдпхккхнммши","","","",1000000000000000.0,true,""},
{"мнкэ","мскебни","","","",0,true,""} //МЕ ДНКФЕМ АШРЭ БЙКЧВЕМ Б NumeralToNumberCount
};


extern const CNumeralToNumber NumeralToNumber[];

extern string IntToStr (double i);
extern string FindByNumber(QWORD Number);
extern int IsAdverbRule(const string& Lemma);
extern double GetCardinalNumeral(const string& word);
extern QWORD GetOrdinalNumeral(const string& word);
extern QWORD GetNounNumeral(const string& word);
extern string spellout_number_ru(QWORD x, BYTE IsOrdinal); // 0 - no , 1 - yes, 10 - yes, for thousands

#endif


